# Generated by Django 4.2.5 on 2023-11-25 07:19

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('user', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AppealAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('answerer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.position')),
                ('appeal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.appeal')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name='news',
            name='category',
            field=models.CharField(choices=[('Вода', 'Water'), ('Освещение', 'Light'), ('Газ', 'Gas'), ('Отопление', 'Heating'), ('Ремонтные работы', 'Repair Work'), ('Вывоз ТКО', 'Msw Removal'), ('Улица', 'Street'), ('Состояние мест накопления', 'Accumulation Sites Condition'), ('Иное', 'Other')], default='Иное'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('appeal_answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.appealanswer')),
            ],
        ),
        migrations.AddField(
            model_name='news',
            name='tags',
            field=models.ManyToManyField(to='user.tag'),
        ),
    ]
